% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dockerfile.R
\name{dockerfile}
\alias{dockerfile}
\title{dockerfile Class Object}
\description{
Setup to create a dockerfile based on a rockerimage
}
\section{Super class}{
\code{\link[ContainR:containr]{ContainR::containr}} -> \code{dockerfile}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{dockerfile}}{Location of the dockerfile. Is set to \verb{docker/Dockerfile/} directory.}

\item{\code{rocker_image}}{A \code{name} from the \link{data_rocker_table} to build off/}

\item{\code{packages}}{Provide a string of either \code{loaded}, \code{installed} or \code{none}.}

\item{\code{include_python}}{Flag to install python using the rocker scripts}

\item{\code{build}}{Default is \code{FALSE}. Set to \code{TRUE} with the \code{build_image} fun.}

\item{\code{tag}}{Create a tag for the image. Defaults to \code{latest}.
Docker build

This function creates a dockerfile based off the rocker version image stacks and reads
from session information to install \code{loaded }, \code{installed} \(or \code{none}\) R libraries. The \code{install2.r} handles
additional package installs and will skip already installed packages on the rocker stack image. The final \code{Dockerfile}
can be used to build a container image with your development environment.
Builds a docker container from a \code{Dockerfile}. The function will look in the \verb{inst/dockerfile/} directory
for an existing Dockerfile.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-dockerfile-new}{\code{dockerfile$new()}}
\item \href{#method-dockerfile-set_image_name}{\code{dockerfile$set_image_name()}}
\item \href{#method-dockerfile-set_rocker_image}{\code{dockerfile$set_rocker_image()}}
\item \href{#method-dockerfile-set_dockerfile}{\code{dockerfile$set_dockerfile()}}
\item \href{#method-dockerfile-set_packages}{\code{dockerfile$set_packages()}}
\item \href{#method-dockerfile-set_python}{\code{dockerfile$set_python()}}
\item \href{#method-dockerfile-build_image}{\code{dockerfile$build_image()}}
\item \href{#method-dockerfile-print}{\code{dockerfile$print()}}
\item \href{#method-dockerfile-clone}{\code{dockerfile$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="info"><a href='../../ContainR/html/containr.html#method-containr-info'><code>ContainR::containr$info()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="launch"><a href='../../ContainR/html/containr.html#method-containr-launch'><code>ContainR::containr$launch()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="proc"><a href='../../ContainR/html/containr.html#method-containr-proc'><code>ContainR::containr$proc()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="set_image"><a href='../../ContainR/html/containr.html#method-containr-set_image'><code>ContainR::containr$set_image()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="set_local"><a href='../../ContainR/html/containr.html#method-containr-set_local'><code>ContainR::containr$set_local()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="set_login"><a href='../../ContainR/html/containr.html#method-containr-set_login'><code>ContainR::containr$set_login()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="set_name"><a href='../../ContainR/html/containr.html#method-containr-set_name'><code>ContainR::containr$set_name()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="set_tag"><a href='../../ContainR/html/containr.html#method-containr-set_tag'><code>ContainR::containr$set_tag()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="start"><a href='../../ContainR/html/containr.html#method-containr-start'><code>ContainR::containr$start()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="status"><a href='../../ContainR/html/containr.html#method-containr-status'><code>ContainR::containr$status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ContainR" data-topic="containr" data-id="stop"><a href='../../ContainR/html/containr.html#method-containr-stop'><code>ContainR::containr$stop()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-new"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$new(
  name = NULL,
  rocker_image = NA,
  tag = NULL,
  dockerfile = NA,
  packages = NA,
  include_python = FALSE,
  build = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Name of the saved image. If no name is supplied then it will use the active Rstudio project name \code{rstudioapi::getActiveProject()}.}

\item{\code{rocker_image}}{The base Rocker image: \url{https://rocker-project.org/images/} to build upon. Defau;t
is to use the \code{rstudio} build into \code{packages} based on preferences. The list of current Rockered image
stacks can be view in the data \link{data_rocker_table}.}

\item{\code{tag}}{A character string of the require version. If no tag is supplied then the function will default to \code{latest}.}

\item{\code{dockerfile}}{Default location is in the \verb{docker/} folder. Build will save the final \code{Dockerfile}
to this location at the root project directory. You can also add you're own Dockerfile, however, this package was primarily designed to launch
an active project into a \strong{Rstudio} container from one of the Rocker images: \url{https://rocker-project.org/images/}.}

\item{\code{packages}}{Provide a string of either \code{loaded}, \code{installed} or \code{none}. \code{Loaded} will included packages that are currently
loaded in your active project session. The \code{installed} string will included everything inside you local default R library. Already
installed packages are skipped when the \code{build_image} command is run. If you have a large package library it is
recommended to only install \code{loaded} as you develop your workflow.}

\item{\code{include_python}}{Flag to install python using the rocker scripts \url{https://github.com/rocker-org/rocker-versioned2} which have had minor modifications. Future updates
will see this streamlined. \code{Pandas} and \code{numpy} modules are also installed if this flag is set to \code{TRUE}.}

\item{\code{build}}{This is the flag set to \code{FALSE} for when the settings are in place for the Docker process to build. View the
current settings with the \code{print()} method and then \code{build_image(TRUE)} to start the process. This can take some time so grab a coffee.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-set_image_name"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-set_image_name}{}}}
\subsection{Method \code{set_image_name()}}{
Set the name of the image.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$set_image_name(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Set or get the name of the image for build.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-set_rocker_image"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-set_rocker_image}{}}}
\subsection{Method \code{set_rocker_image()}}{
Change the containr name when launched. Defaults to active Rstudio project.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$set_rocker_image(rocker_image)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rocker_image}}{Change containr name}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-set_dockerfile"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-set_dockerfile}{}}}
\subsection{Method \code{set_dockerfile()}}{
Change the containr name when launched. Defaults to active Rstudio project.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$set_dockerfile(dockerfile)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dockerfile}}{Change containr name}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-set_packages"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-set_packages}{}}}
\subsection{Method \code{set_packages()}}{
Change the containr name when launched. Defaults to active Rstudio project.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$set_packages(packages)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{packages}}{Change containr name}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-set_python"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-set_python}{}}}
\subsection{Method \code{set_python()}}{
If to install python on the image. These make use of the rocker scripts
and are somewhat modified. But \code{pip} with \code{pandas} and \code{numpy} will be included.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$set_python(include_python)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_python}}{Flag \code{TRUE} or \code{FALSE} if to include python}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-build_image"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-build_image}{}}}
\subsection{Method \code{build_image()}}{
Starts the build process based on settings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$build_image(build)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{build}}{Set flag for build}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-print"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-print}{}}}
\subsection{Method \code{print()}}{
Prints a table of the argument settings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dockerfile-clone"></a>}}
\if{latex}{\out{\hypertarget{method-dockerfile-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{dockerfile$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
